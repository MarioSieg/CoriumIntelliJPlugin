/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

// Author: Mario Sieg
// Project: Corium
//
//                                  Apache License
//                            Version 2.0, January 2004
//                         http://www.apache.org/licenses/
//
//    TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
//
//    1. Definitions.
//
//       "License" shall mean the terms and conditions for use, reproduction,
//       and distribution as defined by Sections 1 through 9 of this document.
//
//       "Licensor" shall mean the copyright owner or entity authorized by
//       the copyright owner that is granting the License.
//
//       "Legal Entity" shall mean the union of the acting entity and all
//       other entities that control, are controlled by, or are under common
//       control with that entity. For the purposes of this definition,
//       "control" means (i) the power, direct or indirect, to cause the
//       direction or management of such entity, whether by contract or
//       otherwise, or (ii) ownership of fifty percent (50%) or more of the
//       outstanding shares, or (iii) beneficial ownership of such entity.
//
//       "You" (or "Your") shall mean an individual or Legal Entity
//       exercising permissions granted by this License.
//
//       "Source" form shall mean the preferred form for making modifications,
//       including but not limited to software source code, documentation
//       source, and configuration files.
//
//       "Object" form shall mean any form resulting from mechanical
//       transformation or translation of a Source form, including but
//       not limited to compiled object code, generated documentation,
//       and conversions to other media types.
//
//       "Work" shall mean the work of authorship, whether in Source or
//       Object form, made available under the License, as indicated by a
//       copyright notice that is included in or attached to the work
//       (an example is provided in the Appendix below).
//
//       "Derivative Works" shall mean any work, whether in Source or Object
//       form, that is based on (or derived from) the Work and for which the
//       editorial revisions, annotations, elaborations, or other modifications
//       represent, as a whole, an original work of authorship. For the purposes
//       of this License, Derivative Works shall not include works that remain
//       separable from, or merely link (or bind by name) to the interfaces of,
//       the Work and Derivative Works thereof.
//
//       "Contribution" shall mean any work of authorship, including
//       the original version of the Work and any modifications or additions
//       to that Work or Derivative Works thereof, that is intentionally
//       submitted to Licensor for inclusion in the Work by the copyright owner
//       or by an individual or Legal Entity authorized to submit on behalf of
//       the copyright owner. For the purposes of this definition, "submitted"
//       means any form of electronic, verbal, or written communication sent
//       to the Licensor or its representatives, including but not limited to
//       communication on electronic mailing lists, source code control systems,
//       and issue tracking systems that are managed by, or on behalf of, the
//       Licensor for the purpose of discussing and improving the Work, but
//       excluding communication that is conspicuously marked or otherwise
//       designated in writing by the copyright owner as "Not a Contribution."
//
//       "Contributor" shall mean Licensor and any individual or Legal Entity
//       on behalf of whom a Contribution has been received by Licensor and
//       subsequently incorporated within the Work.
//
//    2. Grant of Copyright License. Subject to the terms and conditions of
//       this License, each Contributor hereby grants to You a perpetual,
//       worldwide, non-exclusive, no-charge, royalty-free, irrevocable
//       copyright license to reproduce, prepare Derivative Works of,
//       publicly display, publicly perform, sublicense, and distribute the
//       Work and such Derivative Works in Source or Object form.
//
//    3. Grant of Patent License. Subject to the terms and conditions of
//       this License, each Contributor hereby grants to You a perpetual,
//       worldwide, non-exclusive, no-charge, royalty-free, irrevocable
//       (except as stated in this section) patent license to make, have made,
//       use, offer to sell, sell, import, and otherwise transfer the Work,
//       where such license applies only to those patent claims licensable
//       by such Contributor that are necessarily infringed by their
//       Contribution(s) alone or by combination of their Contribution(s)
//       with the Work to which such Contribution(s) was submitted. If You
//       institute patent litigation against any entity (including a
//       cross-claim or counterclaim in a lawsuit) alleging that the Work
//       or a Contribution incorporated within the Work constitutes direct
//       or contributory patent infringement, then any patent licenses
//       granted to You under this License for that Work shall terminate
//       as of the date such litigation is filed.
//
//    4. Redistribution. You may reproduce and distribute copies of the
//       Work or Derivative Works thereof in any medium, with or without
//       modifications, and in Source or Object form, provided that You
//       meet the following conditions:
//
//       (a) You must give any other recipients of the Work or
//           Derivative Works a copy of this License; and
//
//       (b) You must cause any modified files to carry prominent notices
//           stating that You changed the files; and
//
//       (c) You must retain, in the Source form of any Derivative Works
//           that You distribute, all copyright, patent, trademark, and
//           attribution notices from the Source form of the Work,
//           excluding those notices that do not pertain to any part of
//           the Derivative Works; and
//
//       (d) If the Work includes a "NOTICE" text file as part of its
//           distribution, then any Derivative Works that You distribute must
//           include a readable copy of the attribution notices contained
//           within such NOTICE file, excluding those notices that do not
//           pertain to any part of the Derivative Works, in at least one
//           of the following places: within a NOTICE text file distributed
//           as part of the Derivative Works; within the Source form or
//           documentation, if provided along with the Derivative Works; or,
//           within a display generated by the Derivative Works, if and
//           wherever such third-party notices normally appear. The contents
//           of the NOTICE file are for informational purposes only and
//           do not modify the License. You may add Your own attribution
//           notices within Derivative Works that You distribute, alongside
//           or as an addendum to the NOTICE text from the Work, provided
//           that such additional attribution notices cannot be construed
//           as modifying the License.
//
//       You may add Your own copyright statement to Your modifications and
//       may provide additional or different license terms and conditions
//       for use, reproduction, or distribution of Your modifications, or
//       for any such Derivative Works as a whole, provided Your use,
//       reproduction, and distribution of the Work otherwise complies with
//       the conditions stated in this License.
//
//    5. Submission of Contributions. Unless You explicitly state otherwise,
//       any Contribution intentionally submitted for inclusion in the Work
//       by You to the Licensor shall be under the terms and conditions of
//       this License, without any additional terms or conditions.
//       Notwithstanding the above, nothing herein shall supersede or modify
//       the terms of any separate license agreement you may have executed
//       with Licensor regarding such Contributions.
//
//    6. Trademarks. This License does not grant permission to use the trade
//       names, trademarks, service marks, or product names of the Licensor,
//       except as required for reasonable and customary use in describing the
//       origin of the Work and reproducing the content of the NOTICE file.
//
//    7. Disclaimer of Warranty. Unless required by applicable law or
//       agreed to in writing, Licensor provides the Work (and each
//       Contributor provides its Contributions) on an "AS IS" BASIS,
//       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
//       implied, including, without limitation, any warranties or conditions
//       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
//       PARTICULAR PURPOSE. You are solely responsible for determining the
//       appropriateness of using or redistributing the Work and assume any
//       risks associated with Your exercise of permissions under this License.
//
//    8. Limitation of Liability. In no event and under no legal theory,
//       whether in tort (including negligence), contract, or otherwise,
//       unless required by applicable law (such as deliberate and grossly
//       negligent acts) or agreed to in writing, shall any Contributor be
//       liable to You for damages, including any direct, indirect, special,
//       incidental, or consequential damages of any character arising as a
//       result of this License or out of the use or inability to use the
//       Work (including but not limited to damages for loss of goodwill,
//       work stoppage, computer failure or malfunction, or any and all
//       other commercial damages or losses), even if such Contributor
//       has been advised of the possibility of such damages.
//
//    9. Accepting Warranty or Additional Liability. While redistributing
//       the Work or Derivative Works thereof, You may choose to offer,
//       and charge a fee for, acceptance of support, warranty, indemnity,
//       or other liability obligations and/or rights consistent with this
//       License. However, in accepting such obligations, You may act only
//       on Your own behalf and on Your sole responsibility, not on behalf
//       of any other Contributor, and only if You agree to indemnify,
//       defend, and hold each Contributor harmless for any liability
//       incurred by, or claims asserted against, such Contributor by reason
//       of your accepting any such warranty or additional liability.
//
//    END OF TERMS AND CONDITIONS
//
//    APPENDIX: How to apply the Apache License to your work.
//
//       To apply the Apache License to your work, attach the following
//       boilerplate notice, with the fields enclosed by brackets "[]"
//       replaced with your own identifying information. (Don't include
//       the brackets!)  The text should be enclosed in the appropriate
//       comment syntax for the file format. We also recommend that a
//       file or class name and description of purpose be included on the
//       same "printed page" as the copyright notice for easier
//       identification within third-party archives.
//
//    Copyright 2021 Mario Sieg "pinsrq" <mt3000@gmx.de>
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

package org.intellij.sdk.corium;

import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.intellij.lexer.FlexLexer;
import org.intellij.sdk.corium.psi.CoriumTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Corium.flex</tt>
 */
class CoriumLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\22\1\0\1\1\1\21\22\0\1\1\1\0\1\15\1\20\3\0\1\14\1\41\1\42\1\0"+
    "\1\2\1\0\1\2\1\16\1\0\1\4\1\10\6\12\2\3\3\0\1\40\3\0\1\6\1\7\1\11\3\6\21\13"+
    "\1\5\2\13\4\0\1\17\1\0\1\32\1\46\1\26\1\6\1\24\1\35\1\47\1\45\1\33\2\13\1"+
    "\23\1\13\1\30\1\27\2\13\1\37\1\31\1\25\1\36\1\34\1\13\1\5\2\13\1\43\1\0\1"+
    "\44\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\2\3\1\4\2\1\1\5"+
    "\10\4\1\6\1\7\1\10\1\11\1\12\1\4\6\0"+
    "\1\13\1\0\1\14\14\4\1\15\3\3\1\16\1\17"+
    "\5\4\1\20\5\4\1\21\1\4\1\22\6\4\1\23"+
    "\1\24\2\4\1\25\1\26\2\4\1\27\1\30\1\4"+
    "\1\31\1\4\1\32";

  private static int [] zzUnpackAction() {
    int [] result = new int[85];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258"+
    "\0\u0280\0\u02a8\0\50\0\50\0\50\0\50\0\50\0\u02d0"+
    "\0\u02f8\0\u0320\0\u0348\0\u0370\0\u0398\0\u0118\0\50\0\u0140"+
    "\0\50\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0460\0\u0488\0\u04b0"+
    "\0\u04d8\0\u0500\0\u0528\0\u0550\0\u0578\0\u02f8\0\u0320\0\u0348"+
    "\0\u0370\0\u05a0\0\360\0\u05c8\0\u05f0\0\u0618\0\u0640\0\u0668"+
    "\0\360\0\u0690\0\u06b8\0\u06e0\0\u0708\0\u0730\0\360\0\u0758"+
    "\0\360\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0848\0\360"+
    "\0\360\0\u0870\0\u0898\0\360\0\360\0\u08c0\0\u08e8\0\360"+
    "\0\360\0\u0910\0\360\0\u0938\0\360";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[85];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\3\7\1\5\1\7"+
    "\1\5\1\7\1\10\1\11\1\2\1\7\1\12\1\2"+
    "\1\3\1\13\1\7\1\14\1\15\1\7\1\16\1\17"+
    "\1\7\1\20\1\7\1\21\1\7\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\7\1\30\1\7\51\0\1\3"+
    "\20\0\1\3\30\0\1\5\1\6\3\0\1\5\1\0"+
    "\1\5\40\0\2\5\3\0\1\5\1\0\1\5\3\0"+
    "\1\31\34\0\2\5\1\32\1\0\1\33\1\5\1\34"+
    "\1\5\3\0\1\31\7\0\1\34\17\0\1\33\4\0"+
    "\11\7\2\0\1\35\1\7\3\0\15\7\5\0\3\7"+
    "\3\0\11\36\1\37\6\0\15\36\5\0\3\36\3\0"+
    "\11\40\1\0\1\41\5\0\15\40\5\0\3\40\21\12"+
    "\2\0\25\12\3\0\11\7\2\0\1\35\1\7\3\0"+
    "\1\7\1\42\13\7\5\0\3\7\3\0\11\7\2\0"+
    "\1\35\1\7\3\0\14\7\1\43\5\0\3\7\3\0"+
    "\11\7\2\0\1\35\1\7\3\0\4\7\1\44\10\7"+
    "\5\0\1\45\2\7\3\0\11\7\2\0\1\35\1\7"+
    "\3\0\7\7\1\46\5\7\5\0\3\7\3\0\11\7"+
    "\2\0\1\35\1\7\3\0\2\7\1\47\12\7\5\0"+
    "\3\7\3\0\11\7\2\0\1\35\1\7\3\0\5\7"+
    "\1\50\7\7\5\0\3\7\3\0\11\7\2\0\1\35"+
    "\1\7\3\0\1\51\6\7\1\52\3\7\1\53\1\7"+
    "\5\0\3\7\3\0\11\7\2\0\1\35\1\7\3\0"+
    "\1\7\1\54\13\7\5\0\3\7\3\0\11\7\2\0"+
    "\1\35\1\7\3\0\4\7\1\55\10\7\5\0\3\7"+
    "\3\0\2\56\3\0\1\56\1\0\1\56\40\0\2\57"+
    "\1\0\5\57\11\0\1\57\1\0\1\57\3\0\1\57"+
    "\2\0\1\57\10\0\1\57\5\0\1\60\3\0\1\60"+
    "\43\0\1\61\3\0\1\61\1\0\1\61\42\0\3\62"+
    "\1\0\1\62\1\0\1\62\3\0\1\62\3\0\15\62"+
    "\5\0\3\62\3\0\11\7\2\0\1\35\1\7\3\0"+
    "\2\7\1\63\12\7\5\0\3\7\3\0\11\7\2\0"+
    "\1\35\1\7\3\0\13\7\1\64\1\7\5\0\3\7"+
    "\3\0\11\7\2\0\1\35\1\7\3\0\5\7\1\65"+
    "\7\7\5\0\3\7\3\0\11\7\2\0\1\35\1\7"+
    "\3\0\7\7\1\66\5\7\5\0\3\7\3\0\11\7"+
    "\2\0\1\35\1\7\3\0\2\7\1\67\12\7\5\0"+
    "\3\7\3\0\11\7\2\0\1\35\1\7\3\0\14\7"+
    "\1\70\5\0\3\7\3\0\11\7\2\0\1\35\1\7"+
    "\3\0\2\7\1\71\12\7\5\0\3\7\3\0\11\7"+
    "\2\0\1\35\1\7\3\0\4\7\1\72\10\7\5\0"+
    "\3\7\3\0\11\7\2\0\1\35\1\7\3\0\1\73"+
    "\14\7\5\0\3\7\3\0\11\7\2\0\1\35\1\7"+
    "\3\0\5\7\1\74\7\7\5\0\3\7\3\0\11\7"+
    "\2\0\1\35\1\7\3\0\2\7\1\75\12\7\5\0"+
    "\3\7\3\0\11\7\2\0\1\35\1\7\3\0\4\7"+
    "\1\76\10\7\5\0\3\7\3\0\11\62\2\0\1\35"+
    "\1\62\3\0\15\62\5\0\3\62\3\0\11\7\2\0"+
    "\1\35\1\7\3\0\1\7\1\77\13\7\5\0\3\7"+
    "\3\0\11\7\2\0\1\35\1\7\3\0\6\7\1\100"+
    "\6\7\5\0\3\7\3\0\11\7\2\0\1\35\1\7"+
    "\3\0\14\7\1\101\5\0\3\7\3\0\11\7\2\0"+
    "\1\35\1\7\3\0\10\7\1\102\4\7\5\0\3\7"+
    "\3\0\11\7\2\0\1\35\1\7\3\0\10\7\1\103"+
    "\4\7\5\0\3\7\3\0\11\7\2\0\1\35\1\7"+
    "\3\0\7\7\1\104\5\7\5\0\3\7\3\0\11\7"+
    "\2\0\1\35\1\7\3\0\6\7\1\105\6\7\5\0"+
    "\3\7\3\0\11\7\2\0\1\35\1\7\3\0\3\7"+
    "\1\106\11\7\5\0\3\7\3\0\11\7\2\0\1\35"+
    "\1\7\3\0\13\7\1\107\1\7\5\0\3\7\3\0"+
    "\11\7\2\0\1\35\1\7\3\0\1\110\14\7\5\0"+
    "\3\7\3\0\11\7\2\0\1\35\1\7\3\0\2\7"+
    "\1\111\12\7\5\0\3\7\3\0\11\7\2\0\1\35"+
    "\1\7\3\0\11\7\1\112\3\7\5\0\3\7\3\0"+
    "\11\7\2\0\1\35\1\7\3\0\5\7\1\113\7\7"+
    "\5\0\3\7\3\0\11\7\2\0\1\35\1\7\3\0"+
    "\2\7\1\114\12\7\5\0\3\7\3\0\11\7\2\0"+
    "\1\35\1\7\3\0\1\7\1\115\13\7\5\0\3\7"+
    "\3\0\11\7\2\0\1\35\1\7\3\0\2\7\1\116"+
    "\12\7\5\0\3\7\3\0\11\7\2\0\1\35\1\7"+
    "\3\0\14\7\1\117\5\0\3\7\3\0\11\7\2\0"+
    "\1\35\1\7\3\0\1\7\1\120\13\7\5\0\3\7"+
    "\3\0\11\7\2\0\1\35\1\7\3\0\15\7\5\0"+
    "\2\7\1\121\3\0\11\7\2\0\1\35\1\7\3\0"+
    "\10\7\1\122\4\7\5\0\3\7\3\0\11\7\2\0"+
    "\1\35\1\7\3\0\5\7\1\123\7\7\5\0\3\7"+
    "\3\0\11\7\2\0\1\35\1\7\3\0\4\7\1\124"+
    "\10\7\5\0\3\7\3\0\11\7\2\0\1\35\1\7"+
    "\3\0\5\7\1\125\7\7\5\0\3\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\20\1\5\11\1\1\6\0\1\11\1\0"+
    "\1\11\64\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[85];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CoriumLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 27: break;
          case 2: 
            { return CoriumTypes.SEPARATOR;
            } 
            // fall through
          case 28: break;
          case 3: 
            { return CoriumTypes.INT_LITERAL;
            } 
            // fall through
          case 29: break;
          case 4: 
            { return CoriumTypes.IDENTIFIER;
            } 
            // fall through
          case 30: break;
          case 5: 
            { yybegin(YYINITIAL); return CoriumTypes.COMMENT;
            } 
            // fall through
          case 31: break;
          case 6: 
            { return CoriumTypes.EQUALS;
            } 
            // fall through
          case 32: break;
          case 7: 
            { return CoriumTypes.LPAREN;
            } 
            // fall through
          case 33: break;
          case 8: 
            { return CoriumTypes.RPAREN;
            } 
            // fall through
          case 34: break;
          case 9: 
            { return CoriumTypes.LBRACE;
            } 
            // fall through
          case 35: break;
          case 10: 
            { return CoriumTypes.RBRACE;
            } 
            // fall through
          case 36: break;
          case 11: 
            { return CoriumTypes.CHAR_LITERAL;
            } 
            // fall through
          case 37: break;
          case 12: 
            { return CoriumTypes.STRING_LITERAL;
            } 
            // fall through
          case 38: break;
          case 13: 
            { return CoriumTypes.FLOAT_LITERAL;
            } 
            // fall through
          case 39: break;
          case 14: 
            { return CoriumTypes.QUALIFIED_NAME;
            } 
            // fall through
          case 40: break;
          case 15: 
            { return CoriumTypes.LET;
            } 
            // fall through
          case 41: break;
          case 16: 
            { return CoriumTypes.INT;
            } 
            // fall through
          case 42: break;
          case 17: 
            { return CoriumTypes.TRUE;
            } 
            // fall through
          case 43: break;
          case 18: 
            { return CoriumTypes.CHAR;
            } 
            // fall through
          case 44: break;
          case 19: 
            { return CoriumTypes.BOOL;
            } 
            // fall through
          case 45: break;
          case 20: 
            { return CoriumTypes.CONST;
            } 
            // fall through
          case 46: break;
          case 21: 
            { return CoriumTypes.FLOAT;
            } 
            // fall through
          case 47: break;
          case 22: 
            { return CoriumTypes.FALSE;
            } 
            // fall through
          case 48: break;
          case 23: 
            { return CoriumTypes.NATIVE;
            } 
            // fall through
          case 49: break;
          case 24: 
            { return CoriumTypes.STRING;
            } 
            // fall through
          case 50: break;
          case 25: 
            { return CoriumTypes.RETURN;
            } 
            // fall through
          case 51: break;
          case 26: 
            { return CoriumTypes.FUNCTION;
            } 
            // fall through
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
